# checks if the config is valid.
# Print error and exit if it fails to execute
sh /etc/nwatch.conf || (printf "There is a syntax error with your config file /etc/nwatch.conf\n";
printf "/etc/nwatch.conf is executed as a bash script to set varibles\n"; exit 1)


if [[ $? == 1 ]]
then
        exit
fi
. /etc/nwatch.conf

# function watchDog. Used to keep the process alove if they stop.
# This is ran for each process
function watchDog(){
        echo "Process \"$2\" started as PID $1. Watchdog is running for this process." >> $logDir
        PID=$1
        while true
        do
                lsof -p $PID +r 1 &>/dev/null
                echo "[ERR]: Process with PID $PID stopped. Attempting to restart with command \"$2\" in 3 seconds." >> $logDir
                $2 &
                PID2=$!
                echo "New PID is $PID."  >> $logDir
                sed -i -e 's/$PID/$PID2/g' /tmp/nwatch
                PID=$PID2
                sleep 3m;

        done
}



# killNwatch stops nwatch
function killNwatch(){

	# Checks if nwatch is running
        if [ ! -f /tmp/nwatch ]; then
                echo "Nwatch not running. Will attempt to reset mon interfaces anyway"
        else
                kill $(cat /tmp/nwatch | tr "\n" " ")
		# ffmpeg fails to stop so must be done manually
                pkill ffmpeg
        fi

	# remove tempoart files
        rm /tmp/nwatch
        rm /tmp/nwatch.process

	# This puts all monitor interfaces down.
	# airmon-ng sometimes creates a duplicate interface.
        IFS=$'\n'
        allMon=($(ifconfig | grep mon| awk '{print $1}'))
        for (( i=0; i<${#allMon[@]}; i++ ))
        do
                sudo airmon-ng stop "${allMon[i]::-1}"
        done
        ifconfig $networkInterface up
        echo "[INFO]: nwatch stopped at $(date +'%F %T')." >> $logDir
}

function startNwatch(){

# Check if nwatch is already running
if [[ -f /tmp/nwatch ]]; 
then 
        echo "NeighborhoodWatch is already running. use \"nwatch --stop\" first." 
        exit
fi

# This formats the camera URL that will work with ffmpeg and v4l2loopback
# The format is http://user:pass@(URL)
httpType=$camURL
if [[ $httpType == *"https"*  ]]
then
        http="https://"
else
        http="http://"
fi
camURL=$(echo $camURL | sed 's/https:\/\///')
camURL=$(echo $camURL | sed 's/http:\/\///')

# Checks if the camera has a username set in /etc/nwatch.conf
# If it doesnt, assume there is no bacic authentication
if [[ $camUser == "" ]]
then
	camURL="$http""$camURL"
else
	camURL="$http""$camUser"":""$camPass""@""$camURL"
fi


# Test connection to the IP camera
# Uses curl to connect to camera. 
# it will fail if the responce contains 404 error or if the connection fails
echo "Testing connection to camera using URL: $camURL"
curl $camURL --max-time 3 --output /tmp/nwatchCamTest 2> /dev/null > /dev/null
if [ -f /tmp/nwatchCamTest ]
then
        if [[ $(cat /tmp/nwatchCamTest | strings | grep -i 404 | grep -i "not found") != "" ]]
        then
                echo "Failed to connect to camera. Recieved a 404 not found error."
		echo "Is the directory for the stream correct"
                rm /tmp/nwatchCamTest
                exit 1
        else
                echo "Connection success..."
                rm /tmp/nwatchCamTest
        fi
else
        echo "Failed to connect to camera. Are you sure the address,username and password are correct?"
        rm /tmp/nwatchCamTest
        exit 1
fi

# Checks if user wants to use differant storage for videos
if [[ $storage != "" ]]
then
	# Check if the storage exists
	# Errors such as forgetting to mount a drive can happen
        if [[ ! -d "$storage/" ]]
        then
                echo "The directory to store videos ($storage) apears not to exist"
                exit
        else
                unlink /srv/http/camEvents 2> /dev/null
                rm -r /srv/http/camEvents  2> /dev/null
                ln -s "$storage" "/srv/http/camEvents" || (echo Failed to create symbolic link to \"$storage\")
        fi

fi

# Edits the motion config file. THis sets the parameters using sed
sed -i "/threshold/c\threshold $threshold" /etc/motion/motion.conf
sed -i "/pre_capture/c\pre_capture $pre_capture" /etc/motion/motion.conf
sed -i "/post_capture/c\post_capture $post_capture" /etc/motion/motion.conf
sed -i "/log_file/c\log_file $logDir" /etc/motion/motion.conf

# Start the process of setting up the monitor mode in the wireless card
sudo ip link set wlan1 up
sudo ifconfig $networkInterface down
sudo ifconfig $networkInterface up
sudo airmon-ng start $networkInterface || (echo "[ERROR]: Failed to start the network interface. check if it is set up correctly"; exit)
	# make sure the module v4l2loopback is loaded
        modprobe v4l2loopback
        sudo airmon-ng start $networkInterface
        touch /tmp/nwatch.process
        touch /tmp/nwatch

	# Start the processes
        sh /var/nwatch/camera/alpr.sh &
        echo $! >> /tmp/nwatch
        PID1=$!
        sh /var/nwatch/camera/startCam.sh &
        sudo chmod 777 /dev/video0
        echo $! >> /tmp/nwatch
        PID2=$!
        . /var/nwatch/wifi/dbSort.sh &
        echo $! >> /tmp/nwatch
        PID3=$!
        sh /var/nwatch/wifi/insert.sh &
        echo $! >> tmp/nwatch
        PID4=$!
        motion &
        echo $! >> /tmp/nwatch
        PID5=$!

	# Start the watchdog for the previous processes
        echo $! >> /tmp/nwatch
        watchDog $PID1 "sh /var/nwatch/camera/alpr.sh" &
        echo $! >> /tmp/nwatch
        watchDog $PID2 "sh /var/nwatch/camera/startCam.sh" & 
        echo $! >> /tmp/nwatch
        watchDog $PID3 ". /var/nwatch/wifi/dbSort.sh" &
        echo $! >> /tmp/nwatch
        watchDog $PID4 "sh /var/nwatch/wifi/insert.sh" &
        echo $! >> /tmp/nwatch
        watchDog $PID5 "motion" &
        echo $! >> /tmp/nwatch
        echo "[INFO]: nwatch started at $(date +'%F %T')." >> $logDir
}

# This is the main menu that calls the correct functions
if [[ $* == *"--start"* ]]
then
        echo "Starting Neighbourhood watch."
        startNwatch
elif [[ $* == *"--status"* ]]
then
        if [ ! -f /tmp/nwatch ]
        then
                echo "Neighbourhood watch is not running"
        else
                echo "Neighbourhood watch is running under the following PIDs:"
                cat /tmp/nwatch | tr "\n" " "
                printf "\nThe log file is at $logDir\n"
        fi
elif [[ $* == *"--stop"* ]] 
then
        echo "Stopping Neighbourhood watch."
        killNwatch
elif [[ $* == *"--restart"* ]] 
then
        echo "Restarting Neighbourhood watch."
        killNwatch
        sleep 2
        startNwatch

elif [[ $* == *"--flush-events"* ]] 
then
	# This flushes all the event tables, except Scanner
	# This is so they wont have to be queried to wigle again 
	echo "Removing processed events..."
	mysql -u $dbUser -p"$dbPassword" nwatch -e"delete from BEACON where 1=1;"
	echo "Removing events to be processed..."
	mysql -u $dbUser -p"$dbPassword" nwatch -e"delete from SCANNERLIMBO where 1=1;"
	echo "Removing camera events..."
	mysql -u $dbUser -p"$dbPassword" nwatch -e"delete from CAMEVENT where 1=1;"
	echo "Deleting all video files..."
	rm /srv/http/camEvents/* 2> /dev/null
	echo "removing log file..."
	rm "$logDir"
	touch "$logDir"
	echo "All done!"
else
	# Error messages if incorrect arguement is given
        echo "Usage:"
        echo "\"nwatch --start\" to start the service"
        echo "\"nwatch --restart\" to restart the service"
        echo "\"nwatch --stop\" to stop the service"
        echo "\"nwatch --flush-events\" to remove all events"
        echo "\"nwatch --status\" to check whether it is running"
        
fi
